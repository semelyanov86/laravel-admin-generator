<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\MassDestroy$MODEL_NAME$Request;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Flash;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Response;
use Yajra\DataTables\Facades\DataTables;
use Gate;

class $MODEL_NAME$Controller extends AppBaseController
{
    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param $MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable
     * @return Response
     */
    public function index(Request $request)
    {
        abort_if(Gate::denies('$MODEL_NAME_CAMEL$_access'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        if ($request->ajax()) {
            $query = $MODEL_NAME$::select(sprintf('%s.*', (new $MODEL_NAME$)->table));
            $table = Datatables::of($query);

            $table->addColumn('placeholder', '&nbsp;');
            $table->addColumn('actions', '&nbsp;');

            $table->editColumn('actions', function ($row) {
                $viewGate      = '$MODEL_NAME_CAMEL$_show';
                $editGate      = '$MODEL_NAME_CAMEL$_edit';
                $deleteGate    = '$MODEL_NAME_CAMEL$_delete';
                $crudRoutePart = '$MODEL_NAME_PLURAL_SNAKE$';

                return view('partials.datatablesActions', compact(
                    'viewGate',
                    'editGate',
                    'deleteGate',
                    'crudRoutePart',
                    'row'
                ));
            });
            $DATATABLE_COLUMNS$
            $table->rawColumns($RAW_DATATABLE_COLUMNS$);
            return $table->make(true);
        }

        return view('admin.$MODEL_NAME_PLURAL_SNAKE$.index');


    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        abort_if(Gate::denies('$MODEL_NAME_CAMEL$_create'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::create($input);

        Flash::success(__('messages.saved', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        abort_if(Gate::denies('$MODEL_NAME_CAMEL$_show'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        abort_if(Gate::denies('$MODEL_NAME_CAMEL$_edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($MODEL_NAME$ $$MODEL_NAME_CAMEL$, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$->update($request->all());

        Flash::success(__('messages.updated', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @throws \Exception
     *
     * @return Response
     */
    public function destroy($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        abort_if(Gate::denies('$MODEL_NAME_CAMEL$_delete'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $$MODEL_NAME_CAMEL$->delete();

        Flash::success(__('messages.deleted', ['model' => __('models/$MODEL_NAME_PLURAL_CAMEL$.singular')]));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    public function massDestroy(MassDestroy$MODEL_NAME$Request $request)
    {
        $MODEL_NAME$::whereIn('id', request('ids'))->delete();

        return response(null, Response::HTTP_NO_CONTENT);
    }
}
